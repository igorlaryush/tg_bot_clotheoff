from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from localization import get_text, SUPPORTED_LANGUAGES # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
import payments # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–ª–∞—Ç–µ–∂–µ–π
import config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª

LANG_NAMES = {
    "en": "English",
    "ru": "–†—É—Å—Å–∫–∏–π"
}
LANG_FLAGS = {
    "en": "üá¨üáß",
    "ru": "üá∑üá∫"
}

# --- –û–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∫–∞–∫ –≤ config.py –∏–ª–∏ –∑–¥–µ—Å—å) ---
APPEARANCE_OPTIONS = {
    "postprocessing": ["", "anime", "upscale"], # "" - –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
    "age": ["", "18", "20", "30", "40", "50"],
    "breast_size": ["", "small", "normal", "big"],
    "body_type": ["", "skinny", "normal", "curvy", "muscular"],
    "butt_size": ["", "small", "normal", "big"],
}

SCENE_OPTIONS = {
    "pose": [ # –ò–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "Blowjob", "Doggy Style", "Cumshot", "Cumshot POV", "Shower Room",
        "Shibari", "Ahegao", "Ahegao cum", "Holding tits", "Missionary POV",
        "Cowgirl POV", "Anal Fuck", "Legs up presenting", "Spreading legs",
        "Tit Fuck", "TGirl", "Tits On Glass", "Christmas", "Winter 1", "naked cum", 
        "pregnant"
    ],
    "cloth": [ # –ò–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "bikini", "lingerie", "sport wear", "bdsm", "latex",
        "teacher", "schoolgirl", "bikini leopard",  "naked tatoo",
        "witch", "sexy witch", "sexy maid", "Christmas underwear", 
        "cheerleader", "police", "secretary"
    ]
}

PROCESSING_OPTIONS = {**APPEARANCE_OPTIONS, **SCENE_OPTIONS}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ---
def get_language_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(f"{LANG_FLAGS['en']} {LANG_NAMES['en']}", callback_data="set_lang:en")],
        [InlineKeyboardButton(f"{LANG_FLAGS['ru']} {LANG_NAMES['ru']}", callback_data="set_lang:ru")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é ---
def get_main_reply_keyboard(lang: str) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ú–µ–Ω—é'."""
    keyboard = [
        [KeyboardButton(get_text("menu_button", lang))]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è ---
def get_agreement_keyboard(lang: str) -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(get_text("accept_button", lang), callback_data="accept_terms:true"),
            InlineKeyboardButton(get_text("decline_button", lang), callback_data="decline_terms:true"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
def get_settings_main_keyboard(lang: str) -> InlineKeyboardMarkup:
    keyboard = [
        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        [InlineKeyboardButton(get_text("option_language", lang), callback_data="show_settings_option:language")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏ –Ω–æ–≤—ã–º –ø–æ—Ç–æ–∫–æ–º) ---
def get_appearance_settings_keyboard(lang: str, is_photo_flow: bool = False) -> InlineKeyboardMarkup:
    keyboard = []
    
    base_callback = "photo_option" if is_photo_flow else "show_settings_option"
    back_callback = "photo_back:main" if is_photo_flow else "back_to_settings:main"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    for option_key in APPEARANCE_OPTIONS.keys():
        option_name = get_text(f"option_{option_key}", lang) # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –æ–ø—Ü–∏–∏
        display_value = get_text("option_not_set", lang)
        button_text = f"{option_name}: {display_value}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"{base_callback}:{option_key}")])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton(get_text("back_button", lang), callback_data=back_callback),
        InlineKeyboardButton(get_text("process_button", lang), callback_data="photo_action:process")
    ])

    return InlineKeyboardMarkup(keyboard)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ü–∏–∏ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è —è–∑—ã–∫–∞) ---
def get_option_value_keyboard(option_key: str, lang: str, current_lang: str) -> InlineKeyboardMarkup:
    keyboard = []
    
    if option_key == 'language':
        available_values = SUPPORTED_LANGUAGES
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        for lang_code in available_values:
            flag = LANG_FLAGS.get(lang_code, "")
            name = LANG_NAMES.get(lang_code, lang_code.upper())
            button_text = f"{flag} {name}".strip()

            if lang_code == current_lang:
                button_text = f"‚úÖ {button_text}"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_lang:{lang_code}")])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton(get_text("back_button", lang), callback_data="back_to_start")
    ])

    return InlineKeyboardMarkup(keyboard)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ ===

def get_photo_settings_keyboard(lang: str, current_settings: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ."""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–º–µ–Ω—é –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
    keyboard.append([InlineKeyboardButton(
        get_text("option_appearance", lang), 
        callback_data="photo_submenu:appearance"
    )])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ü–∏–π —Å—Ü–µ–Ω—ã (–ø–æ–∑–∞ –∏ –æ–¥–µ–∂–¥–∞)
    for option_key in SCENE_OPTIONS.keys():
        option_name = get_text(f"option_{option_key}", lang)
        button_text = f"{option_name}" # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–∏
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"photo_option:{option_key}")])

    return InlineKeyboardMarkup(keyboard)

def get_photo_appearance_settings_keyboard(lang: str, current_settings: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–º–µ–Ω—é '–í–Ω–µ—à–Ω–æ—Å—Ç—å' –≤ –ø–æ—Ç–æ–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ."""
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ü–∏–π –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
    for option_key in APPEARANCE_OPTIONS.keys():
        option_name = get_text(f"option_{option_key}", lang)
        value = current_settings.get(option_key)
        
        if value:
            button_text = f"{option_name}: {value}"
        else:
            button_text = f"{option_name}"
            
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"photo_option:{option_key}")])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–æ—Ç–æ
    keyboard.append([
        InlineKeyboardButton(get_text("back_button", lang), callback_data="photo_back:main"),
        InlineKeyboardButton(get_text("process_button", lang), callback_data="photo_action:process")
    ])

    return InlineKeyboardMarkup(keyboard)

def get_photo_option_value_keyboard(option_key: str, lang: str, current_settings: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ü–∏–∏ –≤ –ø–æ—Ç–æ–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ."""
    keyboard = []
    available_values = PROCESSING_OPTIONS.get(option_key, [])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    row = []
    max_cols = 2
    for value in available_values:
        # –î–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ("") –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        display_text = value if value else get_text("value_not_set", lang)
        
        if current_settings.get(option_key) == value:
            display_text = f"‚úÖ {display_text}"

        row.append(InlineKeyboardButton(display_text, callback_data=f"photo_set:{option_key}:{value}"))
        if len(row) == max_cols:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏ "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å"
    back_target = "appearance" if option_key in APPEARANCE_OPTIONS else "main"
    
    if option_key in APPEARANCE_OPTIONS.keys():
        keyboard.append([
            InlineKeyboardButton(get_text("back_button", lang), callback_data=f"photo_back:{back_target}"),
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(get_text("back_button", lang), callback_data=f"photo_back:{back_target}"),
            InlineKeyboardButton(get_text("process_button", lang), callback_data="photo_action:process")
        ])

    return InlineKeyboardMarkup(keyboard)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π ===

def get_payment_packages_keyboard(lang: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏."""
    keyboard = []
    packages = payments.get_all_packages(lang)
    
    for package_id, package_info in packages.items():
        if package_info:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            popular_mark = "üî• " if package_info.get('popular') else ""
            button_text = f"{popular_mark}{package_info['name']}"
            button_text += f"\n{package_info['photos']} —Ñ–æ—Ç–æ - {package_info['price']} ‚ÇΩ"
            
            keyboard.append([InlineKeyboardButton(
                button_text, 
                callback_data=f"buy_package:{package_id}"
            )])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–ª–∏ "–û—Ç–º–µ–Ω–∞"
    keyboard.append([InlineKeyboardButton(
        get_text("back_button", lang), 
        callback_data="cancel_payment"
    )])
    
    return InlineKeyboardMarkup(keyboard)

def get_payment_confirmation_keyboard(package_id: str, lang: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞."""
    keyboard = [
        [InlineKeyboardButton(
            get_text("confirm_purchase", lang), 
            callback_data=f"confirm_purchase:{package_id}"
        )],
        [InlineKeyboardButton(
            get_text("back_to_packages", lang), 
            callback_data="show_packages"
        )],
        [InlineKeyboardButton(
            get_text("cancel_button", lang), 
            callback_data="cancel_payment"
        )]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_balance_keyboard(lang: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º."""
    keyboard = [
        [InlineKeyboardButton(
            get_text("buy_photos", lang), 
            callback_data="show_packages"
        )],
        [InlineKeyboardButton(
            get_text("payment_history", lang), 
            callback_data="show_payment_history"
        )],
        [InlineKeyboardButton(
            get_text("back_button", lang), 
            callback_data="back_to_main"
        )]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_payment_history_keyboard(lang: str, page: int = 0) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=f"payment_history_page:{page-1}"
        ))
    
    nav_row.append(InlineKeyboardButton(
        "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
        callback_data=f"payment_history_page:{page+1}"
    ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É"
    keyboard.append([InlineKeyboardButton(
        get_text("back_button", lang), 
        callback_data="show_balance"
    )])
    
    return InlineKeyboardMarkup(keyboard)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start ---
def get_start_keyboard(lang: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    keyboard = [
        [InlineKeyboardButton(get_text("upload_photo_button", lang), callback_data="show_upload_prompt")],
        [InlineKeyboardButton(get_text("buy_coins_button", lang), callback_data="show_packages")],
        [
            InlineKeyboardButton(get_text("option_language", lang), callback_data="show_settings_option:language"),
            InlineKeyboardButton(get_text("my_channel_button", lang), url=config.TELEGRAM_CHANNEL_URL)
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# === New: keyboard offering choice of payment provider ===

def get_payment_methods_keyboard(package_id: str, lang: str) -> InlineKeyboardMarkup:
    """Creates a keyboard that lets the user choose how to pay for a package."""
    keyboard = [
        # Existing provider ‚Äì StreamPay
        [InlineKeyboardButton(
            f"üí≥ {get_text('pay_with_streampay', lang)}",  # e.g. "Pay by card"
            callback_data=f"pay_method:streampay:{package_id}"
        )],
        # New provider ‚Äì Telegram Stars
        [InlineKeyboardButton(
            f"‚≠êÔ∏è {get_text('pay_with_tgstars', lang)}",  # e.g. "Pay with Telegram Stars"
            callback_data=f"pay_method:tgstars:{package_id}"
        )],
        # Back button
        [InlineKeyboardButton(
            get_text("back_to_packages", lang),
            callback_data="show_packages"
        )]
    ]
    return InlineKeyboardMarkup(keyboard)
